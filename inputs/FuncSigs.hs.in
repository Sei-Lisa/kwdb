-- Based on
-- https://github.com/KoolLSL/lslforge/blob/b93f6b4b8deed79662f67c0c53e30bd106d70a53/lslforge/haskell/src/Language/Lsl/Internal/FuncSigs.hs
module Language.Lsl.Internal.FuncSigs(
    functionSigs,
    findSig,
    convertArgs) where

import Data.List(find)
import Language.Lsl.Internal.Type(LSLType(..), convertValues,LSLValue)

lslFunctionDescriptors = [
        ]

findSig name = find (\ (fname,_,_,_) -> name == fname) functionSigs

convertArgs :: RealFrac a => String -> [LSLValue a] -> [LSLValue a]
convertArgs name args = case findSig name of
    Nothing -> args
    Just (_,_,argTypes,_) -> convertValues (snd (unzip argTypes)) args

functionSigs :: [(String,LSLType,[(String,LSLType)], String)]
<<< LSL KEYWORDS >>>
